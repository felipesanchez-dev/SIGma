#!/usr/bin/env node
/**
 * Script de verificaci√≥n pre-deployment para SIGma Backend
 * Verifica configuraciones, dependencias y variables de entorno
 */

const fs = require('fs');
const path = require('path');

console.log('üîç Verificando configuraci√≥n pre-deployment...\n');

let hasErrors = false;

// 1. Verificar archivos esenciales
const requiredFiles = [
  'api/index.ts',
  'vercel.json',
  'package.json',
  'tsconfig.json',
  '.env',
  '.env.example'
];

console.log('üìÅ Verificando archivos esenciales:');
const rootDir = path.join(__dirname, '..');
requiredFiles.forEach(file => {
  if (fs.existsSync(path.join(rootDir, file))) {
    console.log(`  ‚úÖ ${file}`);
  } else {
    console.log(`  ‚ùå ${file} - FALTANTE`);
    hasErrors = true;
  }
});

// 2. Verificar variables de entorno
console.log('\nüîß Verificando variables de entorno:');
const requiredEnvVars = [
  'NODE_ENV',
  'MONGODB_URI',
  'JWT_PRIVATE_KEY',
  'JWT_PUBLIC_KEY',
  'AES_ENCRYPTION_KEY',
  'SMTP_HOST',
  'SMTP_USER',
  'SMTP_PASS'
];

require('dotenv').config({ path: path.join(rootDir, '.env') });

requiredEnvVars.forEach(envVar => {
  if (process.env[envVar]) {
    const value = process.env[envVar];
    const displayValue = envVar.includes('KEY') || envVar.includes('PASS') || envVar.includes('URI') 
      ? value.substring(0, 10) + '...' 
      : value;
    console.log(`  ‚úÖ ${envVar}=${displayValue}`);
  } else {
    console.log(`  ‚ùå ${envVar} - NO CONFIGURADA`);
    hasErrors = true;
  }
});

// 3. Verificar formato de claves JWT
console.log('\nüîë Verificando formato de claves JWT:');
if (process.env.JWT_PRIVATE_KEY) {
  if (process.env.JWT_PRIVATE_KEY.includes('BEGIN PRIVATE KEY') || 
      process.env.JWT_PRIVATE_KEY.includes('BEGIN RSA PRIVATE KEY')) {
    console.log('  ‚úÖ JWT_PRIVATE_KEY tiene formato v√°lido');
  } else {
    console.log('  ‚ùå JWT_PRIVATE_KEY formato inv√°lido');
    hasErrors = true;
  }
}

if (process.env.JWT_PUBLIC_KEY) {
  if (process.env.JWT_PUBLIC_KEY.includes('BEGIN PUBLIC KEY')) {
    console.log('  ‚úÖ JWT_PUBLIC_KEY tiene formato v√°lido');
  } else {
    console.log('  ‚ùå JWT_PUBLIC_KEY formato inv√°lido');
    hasErrors = true;
  }
}

// 4. Verificar longitud de AES key
if (process.env.AES_ENCRYPTION_KEY) {
  if (process.env.AES_ENCRYPTION_KEY.length >= 32) {
    console.log('  ‚úÖ AES_ENCRYPTION_KEY tiene longitud adecuada');
  } else {
    console.log('  ‚ùå AES_ENCRYPTION_KEY debe tener al menos 32 caracteres');
    hasErrors = true;
  }
}

// 5. Verificar configuraci√≥n de MongoDB
console.log('\nüóÑÔ∏è  Verificando configuraci√≥n de MongoDB:');
if (process.env.MONGODB_URI) {
  if (process.env.MONGODB_URI.startsWith('mongodb://') || 
      process.env.MONGODB_URI.startsWith('mongodb+srv://')) {
    console.log('  ‚úÖ MONGODB_URI tiene formato v√°lido');
  } else {
    console.log('  ‚ùå MONGODB_URI formato inv√°lido');
    hasErrors = true;
  }
}

// 6. Verificar package.json
console.log('\nüì¶ Verificando package.json:');
try {
  const packageJson = JSON.parse(fs.readFileSync(path.join(rootDir, 'package.json'), 'utf8'));
  
  const requiredDeps = ['fastify', 'mongoose', 'jsonwebtoken', 'argon2'];
  const requiredDevDeps = ['@vercel/node'];
  
  requiredDeps.forEach(dep => {
    if (packageJson.dependencies[dep]) {
      console.log(`  ‚úÖ ${dep}@${packageJson.dependencies[dep]}`);
    } else {
      console.log(`  ‚ùå ${dep} - DEPENDENCIA FALTANTE`);
      hasErrors = true;
    }
  });
  
  requiredDevDeps.forEach(dep => {
    if (packageJson.devDependencies && packageJson.devDependencies[dep]) {
      console.log(`  ‚úÖ ${dep}@${packageJson.devDependencies[dep]} (dev)`);
    } else {
      console.log(`  ‚ùå ${dep} - DEPENDENCIA DEV FALTANTE`);
      hasErrors = true;
    }
  });
} catch (error) {
  console.log('  ‚ùå Error leyendo package.json:', error.message);
  hasErrors = true;
}

// 7. Verificar configuraci√≥n de Vercel
console.log('\n‚òÅÔ∏è  Verificando configuraci√≥n de Vercel:');
try {
  const vercelConfig = JSON.parse(fs.readFileSync(path.join(rootDir, 'vercel.json'), 'utf8'));
  
  if (vercelConfig.version === 2) {
    console.log('  ‚úÖ Versi√≥n de Vercel correcta');
  }
  
  if (vercelConfig.builds && vercelConfig.builds.length > 0) {
    console.log('  ‚úÖ Configuraci√≥n de builds presente');
  }
  
  if (vercelConfig.routes && vercelConfig.routes.length > 0) {
    console.log('  ‚úÖ Configuraci√≥n de rutas presente');
  }
  
  if (vercelConfig.functions && vercelConfig.functions['api/index.ts']) {
    console.log('  ‚úÖ Configuraci√≥n de funciones presente');
  }
} catch (error) {
  console.log('  ‚ùå Error leyendo vercel.json:', error.message);
  hasErrors = true;
}

// Resultado final
console.log('\n' + '='.repeat(50));
if (hasErrors) {
  console.log('‚ùå VERIFICACI√ìN FALL√ì - Corrige los errores antes del deployment');
  console.log('\nüí° Consulta DEPLOYMENT.md para m√°s informaci√≥n');
  process.exit(1);
} else {
  console.log('‚úÖ VERIFICACI√ìN EXITOSA - Listo para deployment');
  console.log('\nüöÄ Puedes proceder con el deployment en Vercel');
  console.log('\nPr√≥ximos pasos:');
  console.log('1. Conecta tu repositorio con Vercel');
  console.log('2. Configura las variables de entorno en Vercel');
  console.log('3. Despliega tu aplicaci√≥n');
}